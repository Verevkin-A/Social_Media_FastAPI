name: Build and deploy

on: [push, pull_request]

jobs:
  build:
    environment:
      name: testing
    env:
      HOST: ${{ secrets.HOST }}
      PORT: ${{ secrets.PORT }}
      DATABASE: ${{ secrets.DATABASE }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      JWT_ENCODE_KEY: ${{ secrets.JWT_ENCODE_KEY }}
      JWT_ALGORITHM: ${{ secrets.JWT_ALGORITHM }}
    services:
      postgres:   # database setup
        image: postgres:latest
        env:
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DB_NAME }}_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    runs-on: ubuntu-latest
    steps:
      - name: pull git repository
        uses: actions/checkout@v3
      - name: install python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: upgrade pip
        run: python -m pip install --upgrade pip
      - name: install requirements
        run: pip install -r requirements.txt
      - name: run tests
        run: pytest tests/    # running test on the application
      - name: Login to Docker Hub     # dockerize app
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
        - name: Set up Docker Buildx
          id: buildx
          uses: docker/setup-buildx-action@v1
        - name: Build and push
          id: docker_build
          uses: docker/build-push-action@v2
          with:
            context: ./
            file: ./Dockerfile
            builder: ${{ steps.buildx.outputs.name }}
            push: true
            tags: ${{ secrets.DOCKER_HUB_USERNAME }}/social_media_fastapi:latest
            cache-from: type=local,src=/tmp/.buildx-cache
            cache-to: type=local,dest=/tmp/.buildx-cache
        - name: Image digest
          run: echo ${{ steps.docker_build.outputs.digest }}

  deploy:   # deploy on heroku
    runs-on: ubuntu-latest
    needs:
      - build
    environment: production
    steps:
      - name: pull git repository
        uses: actions/checkout@v3
      - name: Heroku deployment
        uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
